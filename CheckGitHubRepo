#!/bin/sh
. ./version
#UPD_ELEMENTS="Bootloader/u-boot-novasomM8-2017.11_${VERSION} Bootloader/u-boot-novasomP-2015.04_${VERSION} Bootloader/u-boot-novasomU-2016.03_${VERSION} Bootloader/u-boot-novasomN1-2017.11_${VERSION} Bootloader/u-boot-novasomM7-2017.09_${VERSION}"
#KERNEL_ELEMENTS="Kernel/linux-imx_4.1.15_1.2.0_ga_${VERSION} Kernel/linux-imx_4.1.43_${VERSION} Kernel/linux-4.11.0-QualcommLinaro_${VERSION} Kernel/linux-4.14.47_layerscape_${VERSION} Kernel/linux-4.4.143_M7_${VERSION}"
UPD_ELEMENTS="Bootloader/u-boot-novasomM7-2017.09_${VERSION}"
KERNEL_ELEMENTS="Kernel/linux-4.4.143_M7_${VERSION}"
CODE_ELEMENTS="${UPD_ELEMENTS} ${KERNEL_ELEMENTS}"
DIRS="${UPD_ELEMENTS} ${KERNEL_ELEMENTS} Doc Utils Qt/NOVAembed-${VERSION}"

REPOCOUNT=`echo "$DIRS" | awk '{print NF}'`

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

COUNTMODS=0
COUNTRECV=0
INCREMENT=1

novaembed()
{
	cd /Devel/NOVAsdk${VERSION}/Qt/build-NOVAembed-Desktop-Debug
	make distclean
	/usr/lib64/qt5/bin/qmake /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed.pro -r -spec linux-g++-64 CONFIG+=debug
	make
	cd /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed_P_Parser
	rm -rf obj bin
	mkdir -p obj bin/Debug
	gcc -Wall -g  -c src/dts_gen.c -o obj/dts_gen.o
	gcc -Wall -g  -c src/iomux.c -o obj/iomux.o
	gcc -Wall -g  -c src/main.c -o obj/main.o
	g++  -o bin/Debug/NOVAembed_P_Parser obj/dts_gen.o obj/iomux.o obj/main.o
	cd /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed_U_Parser
	rm -rf obj bin
	mkdir -p obj bin/Debug
	gcc -Wall -g  -c src/dts_gen.c -o obj/dts_gen.o
	gcc -Wall -g  -c src/iomux.c -o obj/iomux.o
	gcc -Wall -g  -c src/main.c -o obj/main.o
	g++  -o bin/Debug/NOVAembed_U_Parser obj/dts_gen.o obj/iomux.o obj/main.o  
}

gitloop()
{
gitbin="git -C $1"
echo "Look for updates in ${1}"
echo "Look for updates in ${1}" >> /Devel/NOVAsdk${VERSION}/Logs/update.log

# Fetches from all the remotes, although --all can be replaced with origin
$gitbin fetch origin
if [ $($gitbin rev-parse HEAD)>/dev/null 2>&1 != $($gitbin rev-parse @{u})>/dev/null 2>&1 ]; then
	cd $1
	COUNTMODS=`expr $COUNTMODS + $INCREMENT`;
	#$gitbin rebase @{u} --preserve-merges
	echo "Updates found in ${1}" >> /Devel/NOVAsdk${VERSION}/Logs/update.log
	printf "  ${RED}Updates in ${1}${NC}"
	echo -n "  Do you want to update ? [Y/n] "
	read VAR
	if [ "${VAR}" = "Y" ]; then
		echo "Applying updates in ${1}" >> /Devel/NOVAsdk${VERSION}/Logs/update.log
		STRING=`echo ${1} | cut -c1-31`
		if [ "${STRING}" = "/Devel/NOVAsdk${VERSION}/Qt/NOVAembed" ]; then
			rm -f /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed/NOVAembed.pro.userOLD
			mv /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed.pro.user /Devel/NOVAsdk${VERSION}/Qt/NOVAembed/NOVAembed.pro.userOLD
		fi
		git pull origin master >> /Devel/NOVAsdk${VERSION}/Logs/update.log
		COUNTRECV=`expr $COUNTRECV + $INCREMENT`;
		# echo $1
		if [ "${STRING}" = "/Devel/NOVAsdk${VERSION}/Qt/NOVAembed" ]; then
			HERE=`pwd`
			novaembed
			cd ${HERE} 
		fi
		printf "${GREEN}SYNC OK${NC} : ${1}"
	else
		printf "${RED}Update skipped${NC}"
	fi
else
	printf "${GREEN}SYNC OK${NC} : ${1}"
	echo " "
fi
}

echo ""
echo "***************************************"
echo "**  Check for remote modified files  **"
echo "***************************************"
echo ""

echo "Check on `date`" > /Devel/NOVAsdk${VERSION}/Logs/update.log

for i in ${CODE_ELEMENTS}; do
	HERE=`pwd`
        if ! [ -d /Devel/NOVAsdk${VERSION}/${i} ]; then
                cd /Devel/NOVAsdk${VERSION}/`dirname $i`
                echo "`dirname $i`/`basename $i` not found, cloning"
                git clone https://github.com/NovasomIndustries/`basename $i`
        fi
        cd ${HERE}
done

if ! [ -d /Devel/NOVAsdk${VERSION}/Qt/NOVAembed-${VERSION} ]; then
	HERE=`pwd`
	cd /Devel/NOVAsdk${VERSION}/Qt
	echo " NOVAembed not found, cloning"
	git clone https://github.com/NovasomIndustries/NOVAembed-${VERSION}.git
	ln -s NOVAembed-${VERSION} NOVAembed
	novaembed
	cd ${HERE} 
fi

for i in ${DIRS}; do
	gitloop /Devel/NOVAsdk${VERSION}/$i
done

echo ""
[ "${COUNTMODS}" -ge "1" ] && printf "Finished. Found ${RED}${COUNTMODS}${NC} modification(s) , ${RED}${COUNTRECV}${NC} file(s) received from remote to ${GREEN}${REPOCOUNT}${NC} local repos"
[ "${COUNTMODS}" -le "0" ] && printf "Finished. Found ${GREEN}${COUNTMODS}${NC} modification(s) , ${GREEN}${COUNTRECV}${NC} file(s) received from remote to ${GREEN}${REPOCOUNT}${NC} local repos"
echo ""

exit ${COUNTRECV}

